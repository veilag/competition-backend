from typing import List
from aiogram.utils.web_app import WebAppInitData
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from ..auth.deps import authorize_user, authorize_stand
from ...database import get_db
from .models import User
from .schemas import UserModel, UserCreate
from .crud import create_user, get_users_in_place
from ..schemas import MessageResponse

router = APIRouter(
    prefix="/users",
)


@router.get(
    path="/me",
    response_model=UserModel,
    tags=["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
    summary="–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
)
async def send_user_credentials(
    auth_data: List[WebAppInitData | User | None] = Depends(authorize_user),
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    _, user = auth_data
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"
        )

    return UserModel.from_orm(user)


@router.post(
    path="/register",
    response_model=MessageResponse,
    tags=["üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"],
    summary="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    description="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
)
async def register_user(
    user_data: UserCreate,
    auth_data: List[WebAppInitData | User | None] = Depends(authorize_user),
    session: AsyncSession = Depends(get_db),
):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """
    _, user = auth_data

    if not user:
        await create_user(session, user_data)
        return {
            "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        }

    else:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
        )


@router.get(
    path="/all",
    tags=["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"],
    summary="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤—Ö–æ–¥–µ",
    description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞"
)
async def users_in_place(
    session: AsyncSession = Depends(get_db),
    _=Depends(authorize_stand)
):
    """
    –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤—Ö–æ–¥–µ
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∏–∑ —Å—Ç–µ–Ω–¥–æ–≤
    """
    users = await get_users_in_place(session)
    return [UserModel.from_orm(user) for user in users]
